{
	"info": {
		"_postman_id": "4ed660a7-aeb5-4932-b85c-8c4be2135e03",
		"name": "Book Store APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17180633"
	},
	"item": [
		{
			"name": "Retrieve all Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Response Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Rsponse time \r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"})\r",
							"\r",
							"\r",
							"// Pagination Validation\r",
							"pm.test(\"Page 1 returns correct number of items\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.books) {\r",
							"        pm.expect(jsonData.books.length).to.be.at.most(10); // assuming 10 items per page\r",
							"    } else {\r",
							"        pm.expect(jsonData.length).to.be.at.most(10); // assuming 10 items per page\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/books?limit=test",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "test"
						},
						{
							"key": "type",
							"value": "crime",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve a Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code Validaiton\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Rsponse time Validation\r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Response Header Validation\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Schema Validation\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"name\": { \"type\": \"string\" },\r",
							"        \"author\": { \"type\": \"string\" },\r",
							"        \"type\": { \"type\": \"string\" }\r",
							"    },\r",
							"    \"required\": [\"id\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Schema Validation\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// Chaining Requests\r",
							"pm.test(\"Store book ID\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.collectionVariables.set(\"bookId\", responseJson.id);\r",
							"});\r",
							"\r",
							"// Pagination Validation\r",
							"pm.test(\"Page 1 returns correct number of items\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.books) {\r",
							"        pm.expect(jsonData.books.length).to.be.at.most(7); // assuming 10 items per page\r",
							"    } else {\r",
							"        pm.expect(jsonData.length).to.be.at.most(5); // assuming 10 items per page\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/books/:bookid",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						":bookid"
					],
					"variable": [
						{
							"key": "bookid",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Rsponse time Validation\r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Response Header Validation\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Schema Validation\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"name\": { \"type\": \"string\" },\r",
							"        \"author\": { \"type\": \"string\" },\r",
							"        \"type\": { \"type\": \"string\" }\r",
							"    },\r",
							"};\r",
							"\r",
							"pm.test(\"Schema Validation\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Postman\",\r\n   \"clientEmail\": \"rimshahassan@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api-clients",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Chaining Requests\r",
							"const response = pm.response.json();\r",
							"const orderId = response.orderId\r",
							"pm.collectionVariables.set(\"orderId\", orderId);\r",
							"\r",
							"\r",
							"// Status Code Validation\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"// Rsponse time Validation\r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Response Header Validation\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Schema Validation\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": { \"type\": \"integer\" },\r",
							"        \"name\": { \"type\": \"string\" },\r",
							"        \"author\": { \"type\": \"string\" },\r",
							"        \"type\": { \"type\": \"string\" }\r",
							"    },\r",
							"};\r",
							"\r",
							"pm.test(\"Schema Validation\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"Kamal\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve all Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							" pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Rsponse time Validation\r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Response Header Validation\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"// Pagination Validation\r",
							"pm.test(\"Page 1 returns correct number of items\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.books) {\r",
							"        pm.expect(jsonData.books.length).to.be.at.most(10); // assuming 10 items per page\r",
							"    } else {\r",
							"        pm.expect(jsonData.length).to.be.at.most(10); // assuming 10 items per page\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"// Rsponse time Validation\r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Response Header Validation\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/:orderid",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status Code Validation\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(204);\r",
							"});\r",
							"\r",
							"\r",
							"// Rsponse time Validation\r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Response Header Validation\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Jane Doe\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/{{orderId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Status Code Validation\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"     pm.expect(pm.response.code).to.equal(204);\r",
							"});\r",
							"\r",
							"\r",
							"// Rsponse time Validation\r",
							"pm.test(\"Response time is less than 200ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Response Header Validation\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/:orderid",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderid"
					],
					"variable": [
						{
							"key": "orderid",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "bookId",
			"value": "",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		}
	]
}